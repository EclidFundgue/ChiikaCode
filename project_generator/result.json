{
    "name": "project",
    "type": "folder",
    "children": [
        {
            "name": "src/",
            "type": "folder",
            "children": [
                {
                    "name": "__init__.py",
                    "type": "code",
                    "content": "# src/__init__.py\n\nfrom .sorting import Sorting  # Import Sorting from sorting.py\nfrom .helper import Helper  # Import Helper from helper.py\nfrom .util import Utility  # Import Utility from util.py\n\nclass ProjectHelper:\n    pass\n\nproject_helper = ProjectHelper()"
                },
                {
                    "name": "sorting.py",
                    "type": "code",
                    "content": "# src/sorting.py\n\nclass Sorting:\n    \"\"\"\n    Sorting class with various sorting algorithms.\n    \"\"\"\n\n    def bubble_sort(self, arr):\n        \"\"\"\n        Bubble sort algorithm.\n\n        Args:\n            arr (list): The list of elements to be sorted.\n\n        Returns:\n            list: The sorted list.\n        \"\"\"\n        n = len(arr)\n        for i in range(n):\n            for j in range(0, n - i - 1):\n                if arr[j] > arr[j + 1]:\n                    arr[j], arr[j + 1] = arr[j + 1], arr[j]\n        return arr\n\n    def selection_sort(self, arr):\n        \"\"\"\n        Selection sort algorithm.\n\n        Args:\n            arr (list): The list of elements to be sorted.\n\n        Returns:\n            list: The sorted list.\n        \"\"\"\n        n = len(arr)\n        for i in range(n):\n            min_idx = i\n            for j in range(i + 1, n):\n                if arr[j] < arr[min_idx]:\n                    min_idx = j\n            arr[i], arr[min_idx] = arr[min_idx], arr[i]\n        return arr\n\n# test_sorting.py\nimport unittest\nfrom sorting import Sorting\n\nclass TestSorting(unittest.TestCase):\n    def setUp(self):\n        self.sorting = Sorting()\n\n    def test_bubble_sort(self):\n        arr = [64, 34, 25, 12, 22, 11, 90]\n        sorted_arr = self.sorting.bubble_sort(arr)\n        self.assertEqual(sorted_arr, [11, 12, 22, 25, 34, 64, 90])\n\n    def test_selection_sort(self):\n        arr = [64, 34, 25, 12, 22, 11, 90]\n        sorted_arr = self.sorting.selection_sort(arr)\n        self.assertEqual(sorted_arr, [11, 12, 22, 25, 34, 64, 90])\n\n# helper.py\ndef generate_random_list(size):\n    \"\"\"\n    Generate a random list of integers.\n\n    Args:\n        size (int): The size of the list.\n\n    Returns:\n        list: A random list of integers.\n    \"\"\"\n    import random\n    return [random.randint(0, 100) for _ in range(size)]\n\n# util.py\ndef print_list(arr):\n    \"\"\"\n    Print a list of elements.\n\n    Args:\n        arr (list): The list to be printed.\n    \"\"\"\n    print(arr)\n\nif __name__ == \"__main__\":\n    main()"
                },
                {
                    "name": "test_sorting.py",
                    "type": "code",
                    "content": "import unittest\nfrom src.sorting import Sorting\n\nclass TestSorting(unittest.TestCase):\n    def test_sort(self):\n        # \u7531\u4e8e\u6ca1\u6709\u5177\u4f53\u7684\u7528\u6237\u9700\u6c42\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u5bf9\u4e00\u4e2a\u4f8b\u5b50\u8fdb\u884c\u6d4b\u8bd5\n        numbers = [5, 2, 8, 1, 9]\n        sorting = Sorting()\n        sorted_numbers = sorting.sort(numbers)\n        self.assertEqual(sorted_numbers, [1, 2, 5, 8, 9])\n\nif __name__ == '__main__':\n    unittest.main()"
                },
                {
                    "name": "helper.py",
                    "type": "code",
                    "content": "# src/helper.py\n\ndef get_current_time():\n    \"\"\"\n    Returns the current time in format: YYYY-MM-DD HH:MM:SS\n    \"\"\"\n    from datetime import datetime\n    return datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\ndef print_log(message, level=\"INFO\"):\n    \"\"\"\n    Prints a log message with a specified level.\n\n    Args:\n        message (str): The message to be printed.\n        level (str, optional): The level of the message. Defaults to \"INFO\".\n    \"\"\"\n    print(f\"[{level}] {message}\")\n\ndef convert_to_uppercase(s):\n    \"\"\"\n    Converts a string to uppercase.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The uppercase version of the input string.\n    \"\"\"\n    return s.upper()\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(get_current_time())\n    print_log(\"This is an info message.\", \"INFO\")\n    print(convert_to_uppercase(\"hello world\"))"
                },
                {
                    "name": "util.py",
                    "type": "code",
                    "content": "# src/util.py\n\ndef get_user_input():\n    \"\"\"\u83b7\u53d6\u7528\u6237\u8f93\u5165\"\"\"\n    user_input = input(\"Please enter your name: \")\n    return user_input\n\ndef print_greeting(name):\n    \"\"\"\u6253\u5370\u6b22\u8fce\u6d88\u606f\"\"\"\n    greeting = f\"Welcome, {name}!\"\n    print(greeting)\n\ndef validate_age(age):\n    \"\"\"\u9a8c\u8bc1\u5e74\u9f84\"\"\"\n    if isinstance(age, int) and age >= 0:\n        return True\n    else:\n        return False"
                },
                {
                    "name": "main.py",
                    "type": "code",
                    "content": "# src/main.py\n\nimport sys\nfrom src.sorting import sorting_algorithms\nfrom src.helper import helper_functions\nfrom src.util import utility_functions\n\ndef main():\n    # Display available sorting algorithms\n    print(\"Available Sorting Algorithms:\")\n    for algorithm in sorting_algorithms.algorithms:\n        print(algorithm)\n\n    # Get user input to select an algorithm\n    selected_algorithm = input(\"Enter the name of the algorithm to use: \")\n\n    # Check if the selected algorithm is valid\n    if selected_algorithm not in sorting_algorithms.algorithms:\n        print(\"Invalid algorithm. Exiting.\")\n        sys.exit(1)\n\n    # Call the selected algorithm function\n    helper_functions.print_message(f\"Using {selected_algorithm} algorithm\")\n    result = sorting_algorithms[selected_algorithm]()\n\n    # Display the results\n    utility_functions.display_results(result)\n\nif __name__ == \"__main__\":\n    main()"
                }
            ]
        }
    ]
}