[
    {
        "label": "getRawCodeStream",
        "importPath": "gencode",
        "description": "gencode",
        "isExtraImport": true,
        "detail": "gencode",
        "documentation": {}
    },
    {
        "label": "getRawCodeStream",
        "importPath": "gencode",
        "description": "gencode",
        "isExtraImport": true,
        "detail": "gencode",
        "documentation": {}
    },
    {
        "label": "getLongestCodeBlock",
        "importPath": "share",
        "description": "share",
        "isExtraImport": true,
        "detail": "share",
        "documentation": {}
    },
    {
        "label": "lang_exts",
        "importPath": "share",
        "description": "share",
        "isExtraImport": true,
        "detail": "share",
        "documentation": {}
    },
    {
        "label": "supported_langs",
        "importPath": "share",
        "description": "share",
        "isExtraImport": true,
        "detail": "share",
        "documentation": {}
    },
    {
        "label": "llm",
        "importPath": "share",
        "description": "share",
        "isExtraImport": true,
        "detail": "share",
        "documentation": {}
    },
    {
        "label": "supported_langs",
        "importPath": "share",
        "description": "share",
        "isExtraImport": true,
        "detail": "share",
        "documentation": {}
    },
    {
        "label": "getLongestCodeBlock",
        "importPath": "share",
        "description": "share",
        "isExtraImport": true,
        "detail": "share",
        "documentation": {}
    },
    {
        "label": "lang_exts",
        "importPath": "share",
        "description": "share",
        "isExtraImport": true,
        "detail": "share",
        "documentation": {}
    },
    {
        "label": "supported_langs",
        "importPath": "share",
        "description": "share",
        "isExtraImport": true,
        "detail": "share",
        "documentation": {}
    },
    {
        "label": "getLongestCodeBlock",
        "importPath": "share",
        "description": "share",
        "isExtraImport": true,
        "detail": "share",
        "documentation": {}
    },
    {
        "label": "lang_exts",
        "importPath": "share",
        "description": "share",
        "isExtraImport": true,
        "detail": "share",
        "documentation": {}
    },
    {
        "label": "llm",
        "importPath": "share",
        "description": "share",
        "isExtraImport": true,
        "detail": "share",
        "documentation": {}
    },
    {
        "label": "supported_langs",
        "importPath": "share",
        "description": "share",
        "isExtraImport": true,
        "detail": "share",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "structure",
        "description": "structure",
        "isExtraImport": true,
        "detail": "structure",
        "documentation": {}
    },
    {
        "label": "getRawStructureStream",
        "importPath": "structure",
        "description": "structure",
        "isExtraImport": true,
        "detail": "structure",
        "documentation": {}
    },
    {
        "label": "parseStructureString",
        "importPath": "structure",
        "description": "structure",
        "isExtraImport": true,
        "detail": "structure",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "structure",
        "description": "structure",
        "isExtraImport": true,
        "detail": "structure",
        "documentation": {}
    },
    {
        "label": "getRawStructureStream",
        "importPath": "structure",
        "description": "structure",
        "isExtraImport": true,
        "detail": "structure",
        "documentation": {}
    },
    {
        "label": "parseStructureString",
        "importPath": "structure",
        "description": "structure",
        "isExtraImport": true,
        "detail": "structure",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ChatPromptTemplate",
        "importPath": "langchain.prompts",
        "description": "langchain.prompts",
        "isExtraImport": true,
        "detail": "langchain.prompts",
        "documentation": {}
    },
    {
        "label": "ChatPromptTemplate",
        "importPath": "langchain.prompts",
        "description": "langchain.prompts",
        "isExtraImport": true,
        "detail": "langchain.prompts",
        "documentation": {}
    },
    {
        "label": "StrOutputParser",
        "importPath": "langchain.schema.output_parser",
        "description": "langchain.schema.output_parser",
        "isExtraImport": true,
        "detail": "langchain.schema.output_parser",
        "documentation": {}
    },
    {
        "label": "StrOutputParser",
        "importPath": "langchain.schema.output_parser",
        "description": "langchain.schema.output_parser",
        "isExtraImport": true,
        "detail": "langchain.schema.output_parser",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "st_helper",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "st_helper",
        "description": "st_helper",
        "detail": "st_helper",
        "documentation": {}
    },
    {
        "label": "ChatOllama",
        "importPath": "langchain_community.chat_models",
        "description": "langchain_community.chat_models",
        "isExtraImport": true,
        "detail": "langchain_community.chat_models",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "RunnablePassthrough",
        "importPath": "langchain.schema.runnable",
        "description": "langchain.schema.runnable",
        "isExtraImport": true,
        "detail": "langchain.schema.runnable",
        "documentation": {}
    },
    {
        "label": "DeltaGenerator",
        "importPath": "streamlit.delta_generator",
        "description": "streamlit.delta_generator",
        "isExtraImport": true,
        "detail": "streamlit.delta_generator",
        "documentation": {}
    },
    {
        "label": "directGetJsonString",
        "kind": 2,
        "importPath": "api",
        "description": "api",
        "peekOfCode": "def directGetJsonString(requirement: str, lang: str = \"python\") -> str:\n    \"\"\" 输入需求，返回结果 \"\"\"\n    stream = getRawStructureStream(requirement, lang) # 结构字符流\n    stream_str = ''.join(list(stream))  # 结构字符串\n    print(stream_str)\n    structure_node = parseStructureString(stream_str, lang) # 解析为文件树\n    # 遍历文件，填充代码\n    for f_node in structure_node.getFileNodes(lang_exts[lang]):\n        content_stream = getRawCodeStream(\n            requirement,",
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "getRawCodeStream",
        "kind": 2,
        "importPath": "gencode",
        "description": "gencode",
        "peekOfCode": "def getRawCodeStream(user_requirement: str, code_structure: str, filename: str, language: str) -> Iterator[str]:\n    \"\"\" 通过用户需求、代码结构、语言、文件名，生成大模型回答的原始字符流 \"\"\"\n    language = language.lower()\n    if language not in supported_langs:\n        raise ValueError(f\"Unsupported language: {language}. (Support: {supported_langs})\")\n    template = f\"\"\"\n        请根据以下信息，为指定文件生成基本 {language} 代码。\n        用户需求：{user_requirement}\n        代码框架：\n        ```markdown",
        "detail": "gencode",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def init():\n    st.session_state[\"messages\"] = []\n    st.session_state[\"generating\"] = False\n    st.session_state['node'] = None\n    st.session_state['question'] = None\n    st.session_state['language'] = None\n    st.session_state['button_ok'] = False\n    st.session_state['button_cancel'] = False\n    st_helper.stAddMessage(\"ai\", \"text\", \"你需要生成什么项目?\", wirte=False)\n    st.session_state[\"initialized\"] = True",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "startGeneratConfirm",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def startGeneratConfirm():\n    st.session_state[\"generating\"] = True\n    st.session_state['button_ok'] = False\n    st.session_state['button_cancel'] = False\ndef drawButton():\n    def on_ok():\n        st.session_state['button_ok'] = True\n    def on_cancel():\n        st.session_state['button_cancel'] = True\n    st.session_state['button_ok'] = st.button(\"确定生成\", on_click=on_ok)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "drawButton",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def drawButton():\n    def on_ok():\n        st.session_state['button_ok'] = True\n    def on_cancel():\n        st.session_state['button_cancel'] = True\n    st.session_state['button_ok'] = st.button(\"确定生成\", on_click=on_ok)\n    st.session_state['button_cancel'] = st.button(\"取消\", on_click=on_cancel)\ndef generateCode(node: Node, language: str):\n    if node is None:\n        return",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "generateCode",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def generateCode(node: Node, language: str):\n    if node is None:\n        return\n    with st.empty():\n        for f_node in node.getFileNodes(lang_exts[language]):\n            content = st_helper.stWrite(\n                st.chat_message(\"ai\"),\n                getRawCodeStream(\n                    None,\n                    node.getStrucureString(),",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "st.session_state['language']",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "st.session_state['language'] = st.selectbox(\"选择语言\", supported_langs)\nst_helper.stShowMessages()\nst.session_state['question'] = st.chat_input(\"项目需求\")\nif st.session_state['question']:\n    language = st.session_state['language']\n    question = st.session_state['question']\n    st_helper.stAddMessage(\"user\", \"text\", question)\n    with st.empty():\n        content = st_helper.stWrite(st.chat_message(\"ai\"), getRawStructureStream(question, language))\n        node = parseStructureString(content, language)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "st.session_state['question']",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "st.session_state['question'] = st.chat_input(\"项目需求\")\nif st.session_state['question']:\n    language = st.session_state['language']\n    question = st.session_state['question']\n    st_helper.stAddMessage(\"user\", \"text\", question)\n    with st.empty():\n        content = st_helper.stWrite(st.chat_message(\"ai\"), getRawStructureStream(question, language))\n        node = parseStructureString(content, language)\n        st_helper.stAddMessage(\"ai\", \"text\", \"根据你的需求，我生成了以下项目结构：\")\n    st_helper.stAddMessage(\"ai\", \"markdown\", node.getStrucureString())",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "getLongestCodeBlock",
        "kind": 2,
        "importPath": "share",
        "description": "share",
        "peekOfCode": "def getLongestCodeBlock(raw_text: str) -> str:\n    \"\"\" 返回文本中的代码块, 如果有多个, 则返回最长的那个, 否则返回空字符串 \"\"\"\n    # 如果没有代码块, 则直接返回空字符串\n    if not '```' in raw_text:\n        return ''\n    lines = raw_text.split('\\n')\n    code_sep_count = 0\n    start_incidies = []\n    end_incidies = []\n    for i, line in enumerate(lines):",
        "detail": "share",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "share",
        "description": "share",
        "peekOfCode": "llm = ChatOllama(model='qwen:7b')\nsupported_langs = [\n    'c', 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'typescript'\n]\nlang_exts = {\n    'c': ['.c', '.h'],\n    'cpp': ['.cpp', '.h', '.hpp'],\n    'csharp': ['.cs'],\n    'go': ['.go'],\n    'java': ['.java'],",
        "detail": "share",
        "documentation": {}
    },
    {
        "label": "supported_langs",
        "kind": 5,
        "importPath": "share",
        "description": "share",
        "peekOfCode": "supported_langs = [\n    'c', 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'typescript'\n]\nlang_exts = {\n    'c': ['.c', '.h'],\n    'cpp': ['.cpp', '.h', '.hpp'],\n    'csharp': ['.cs'],\n    'go': ['.go'],\n    'java': ['.java'],\n    'javascript': ['.js'],",
        "detail": "share",
        "documentation": {}
    },
    {
        "label": "lang_exts",
        "kind": 5,
        "importPath": "share",
        "description": "share",
        "peekOfCode": "lang_exts = {\n    'c': ['.c', '.h'],\n    'cpp': ['.cpp', '.h', '.hpp'],\n    'csharp': ['.cs'],\n    'go': ['.go'],\n    'java': ['.java'],\n    'javascript': ['.js'],\n    'python': ['.py', '.pyi', '.ipynb'],\n    'typescript': ['.ts']\n}",
        "detail": "share",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "structure",
        "description": "structure",
        "peekOfCode": "class Node:\n    \"\"\" 文件系统节点, type 为 'folder' 或 'code' 或 'file' \"\"\"\n    def __init__(self, name: str, type: str, parent: 'Node' = None):\n        self.name = name\n        self.type = type\n        self.parent = parent\n        self.children: List[Node] = []\n        # 该变量由 Node.addChild() 自动维护\n        self.depth = 0\n        # 只有 type = 'code' 的节点才有 content 属性",
        "detail": "structure",
        "documentation": {}
    },
    {
        "label": "getRawStructureStream",
        "kind": 2,
        "importPath": "structure",
        "description": "structure",
        "peekOfCode": "def getRawStructureStream(requirement: str, languange: str = 'python') -> Iterator[str]:\n    \"\"\" 输入需求, 返回大语言模型生成的项目结构数据流 \"\"\"\n    languange = languange.lower()\n    if languange not in supported_langs:\n        raise ValueError(f\"Unsupported language: {languange}. (Support: {supported_langs})\")\n    template = '项目需求：{requirement}\\n'\\\n        f'你将为该项目生成基本的 {languange} 代码框架。\\n'\\\n        '请给出项目的文件目录结构，应尽可能包含所有的模块可能用到的文件。\\n'\\\n        '路径中不要包含中文，请使用英文。\\n'\\\n        '只需用4个空格的缩进表示文件的层级关系，请不要包含其它符号。\\n'\\",
        "detail": "structure",
        "documentation": {}
    },
    {
        "label": "parseStructureString",
        "kind": 2,
        "importPath": "structure",
        "description": "structure",
        "peekOfCode": "def parseStructureString(structure_str: str, languange: str = 'python') -> Node:\n    \"\"\" 解析项目结构数据流, 返回根节点 \"\"\"\n    code_block = getLongestCodeBlock(structure_str)\n    exts = lang_exts[languange.lower()]\n    indent = 4\n    current_indent = 0\n    stack: List[Node] = [Node(name='project', type='folder')]\n    for line in code_block.split('\\n'):\n        if line.startswith('--') and line.endswith('--'):\n            continue",
        "detail": "structure",
        "documentation": {}
    },
    {
        "label": "makeFolder",
        "kind": 2,
        "importPath": "structure",
        "description": "structure",
        "peekOfCode": "def makeFolder(path: str) -> None:\n    ''' Check if this folder exists, ohterwize build recursively. '''\n    head, tail = os.path.split(path)\n    if head and not os.path.exists(head):\n        makeFolder(head)\n    if not os.path.exists(path):\n        os.mkdir(path)\ndef __loadNodeFromJsonDict(node_dict: dict, parent: Node = None) -> Node:\n    ret = Node(node_dict['name'], node_dict['type'], parent)\n    if ret.type == 'folder':",
        "detail": "structure",
        "documentation": {}
    },
    {
        "label": "writeNodeJsonDictIntoFolder",
        "kind": 2,
        "importPath": "structure",
        "description": "structure",
        "peekOfCode": "def writeNodeJsonDictIntoFolder(root: str, node_dict: dict):\n    node = __loadNodeFromJsonDict(node_dict)\n    __writeNodeIntoFolder(root, node)\nif __name__ == '__main__':\n    # with open('result.txt', 'r', encoding='utf-8') as f:\n    #     structure_str = f.read()\n    # root = parseStructureString(structure_str, 'java')\n    # import json\n    # print(json.dumps(root.getJsonDict(), indent=4))\n    # print(root.getStrucureString())",
        "detail": "structure",
        "documentation": {}
    },
    {
        "label": "stWrite",
        "kind": 2,
        "importPath": "st_helper",
        "description": "st_helper",
        "peekOfCode": "def stWrite(chat_message: DeltaGenerator, s: Iterator[str]) -> str:\n    ''' 写入 Streamlit 文本框, 并返回写入的内容 '''\n    result = []\n    def append_line(line: str):\n        result.append(line)\n        return line\n    my_stream = (append_line(line) for line in s)\n    chat_message.write(my_stream)\n    return ''.join(result)\ndef __stShowMessage(msg: dict):",
        "detail": "st_helper",
        "documentation": {}
    },
    {
        "label": "stAddMessage",
        "kind": 2,
        "importPath": "st_helper",
        "description": "st_helper",
        "peekOfCode": "def stAddMessage(role: str, _type: str, message: str, wirte: bool = True):\n    \"\"\" role = ['ai', 'user']; type = ['text', 'markdown'] \"\"\"\n    msg = {\"role\": role, \"type\": _type, \"content\": message}\n    if \"messages\" not in st.session_state:\n        st.session_state[\"messages\"] = []\n    st.session_state[\"messages\"].append(msg)\n    if wirte:\n        __stShowMessage(msg)\ndef stShowMessages():\n    for msg in st.session_state.messages:",
        "detail": "st_helper",
        "documentation": {}
    },
    {
        "label": "stShowMessages",
        "kind": 2,
        "importPath": "st_helper",
        "description": "st_helper",
        "peekOfCode": "def stShowMessages():\n    for msg in st.session_state.messages:\n        __stShowMessage(msg)",
        "detail": "st_helper",
        "documentation": {}
    }
]